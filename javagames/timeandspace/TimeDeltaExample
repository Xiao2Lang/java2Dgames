package javagames.timeandspace;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;
import javax.swing.*;
import javagames.util.*;

public class TimeDeltaExample extends JFrame implements Runnable{
	private FrameRate frameRate;
	private BufferStrategy bs;
	private volatile boolean running;
	private Thread gameThread;
	private RelativeMouseInput mouse;
	private KeyboardInput keyboard;
	private Canvas canvas;
	private float angle;
	private float step;
	private long sleep;
	protected void createAndShowGUI(){
		canvas = new Canvas();
		canvas.setSize(480, 480);
		canvas.setBackground(Color.WHITE);
		canvas.setIgnoreRepaint(true);
		getContentPane().add(canvas);
		setTitle("Time Delta Example");
		setIgnoreRepaint(true);
		pack();
		keyboard = new KeyboardInput();
		canvas.addKeyListener(keyboard);
		mouse = new RelativeMouseInput(canvas);
		canvas.addMouseListener(mouse);
		canvas.addMouseMotionListener(mouse);
		canvas.addMouseWheelListener(mouse);
		setVisible(true);
		canvas.createBufferStrategy(2);
		bs = canvas.getBufferStrategy();
		canvas.requestFocus();
		gameThread = new Thread(this);
		gameThread.start();
	}
	@Override
	public void run() {
		// TODO Auto-generated method stub
		running = true;
		initialize();
		long curTime = System.nanoTime();
		long lastTime = curTime;
		double nsPerFrame;
		while(running){
			curTime = System.nanoTime();
			nsPerFrame = curTime - lastTime;
			gameLoop(nsPerFrame/1.0E9);
			lastTime = curTime;
		}
	}
	private void gameLoop(double delta){
		processInput(delta);
		updateObjects(delta);
		renderFrame();
		sleep(sleep);
	}
	private void renderFrame(){
		do{
			do{
				Graphics g = null;
				try{
					g = bs.getDrawGraphics();
					g.clearRect(0, 0, getWidth(), getHeight());
					render(g);
				}finally{
					if(g != null){
						g.dispose();
					}
				}
			}while(bs.contentsRestored());
			bs.show();
		}while(bs.contentsLost());
	}
	private void sleep(long sleep){
		try{
			Thread.sleep(sleep);
		}catch(InterruptedException e) { }
	}
	private void initialize(){
		frameRate = new FrameRate();
		frameRate.initialize();
		angle = 0.0f;
		step = (float)Math.PI / 2.0f;
	}
	private void processInput(double delta){
		keyboard.poll();
		mouse.poll();
		if(keyboard.keyDownOnce(KeyEvent.VK_UP)){
			sleep += 10;
		}
		if(keyboard.keyDownOnce(KeyEvent.VK_DOWN)){
			sleep -= 10;
		}
		if(sleep > 1000){
			sleep = 1000;
		}
		if(sleep < 0){
			sleep = 0;
		}
	}
	private void updateObjects(double delta){
		angle += step * delta;
		if(angle > 2 * Math.PI){
			angle -= 2 * Math.PI;
		}
	}
	private void render(Graphics g){
		g.setColor(Color.BALCK);
		frameRate.calculate();
		g.drawString(frameRate.getFrameRate(), 20, 20);
		g.drawString("Up arrow increase sleep time", x, y);
	}
}
